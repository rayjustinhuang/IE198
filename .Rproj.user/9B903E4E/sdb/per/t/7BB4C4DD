{
    "collab_server" : "",
    "contents" : "##### R Basics\n\n# set the working directory\nsetwd(\"~/UP Files/IE 198/IE 198 Work\")\n\n# see documentation on functions\nhelp(solve)\n?solve\n\n# this comment is not a hashtag\n# expression\n2 + 3\n# assignment\nx <- 2 + 3\n# print assignment\nx\n\n# this is a group of commands\n{\n  y <- 2 + 3\n  z <- 2 + 4\n}\n# this is an incomplete command\nx <- 1 +\n  2\n\n# loading packages\nlibrary(reshape2)\n\n# dataframes\nx <- c(10.4, 5.6, 3.1, 6.4, 21.7)\ny <- c(11.4, 6.6, 4.1, 7.4, 22.7)\nz <- data.frame(x,y)\nz\n\n# read a CSV file\ndeliverytime <- read.csv(file=\"deliverytime.csv\", header = TRUE, \n                         sep = \",\")\ndeliverytime\n\n# read from Excel\nlibrary(xlsx)\ndeliveryxlsx <- read.xlsx(\"deliverytime.xlsx\")\n\n##### Univariate Analysis\n\n# display summary statistics using both pastecs and R's built-in\n# summary function\nlibrary(pastecs)\noptions(scipen = 100, digits = 2)\nstat.desc(deliverytime)\nsummary(deliverytime)\n\n# create histograms of the delivery time data\nhist(deliverytime$deltime, ylab = \"Minutes\", col = 'green')\nhist(deliverytime$ncases, ylab = \"Cases\", col = 'green')\nhist(deliverytime$distance, main = \"Histogram for Distance\",\n     ylab = \"Feet\", col = 'green')\n\n# create boxplots\nboxplot(deliverytime$deltime, ylab = \"Minutes\", col = 'green')\nboxplot(deliverytime$ncases, ylab = \"Cases\", col = 'green')\nboxplot(deliverytime$distance, main = \"Boxplot for Distance\",\n     ylab = \"Feet\", col = 'green')\n\n##### Bivariate Analysis\n\n# scatterplot array\npairs(deliverytime)\n\n# correlation (manual calculation)\nsdeliverytime <- deliverytime\nsdeliverytime$deltime <- \n  (deliverytime$deltime-mean(deliverytime$deltime))/\n  sd(deliverytime$deltime)\nsdeliverytime$ncases <- \n  (deliverytime$ncases-mean(deliverytime$ncases))/\n  sd(deliverytime$ncases)\nsdeliverytime$distance <- \n  (deliverytime$distance-mean(deliverytime$distance))/\n  sd(deliverytime$distance)\ncorrel <- \n  sum(sdeliverytime$deltime*sdeliverytime$ncases)/\n  (nrow(sdeliverytime)-1)\ncorrel\n\n# correlation (built-in function)\ncor(deliverytime$ncases, deliverytime$deltime)\n\n# important note: the correlation statistic only measures \n#*linear* relationships; there may still be quadratic, \n# cubic, etc. (higher-order) relationships present\n\n# Euclidean distance (manual)\nNDelTime <- (20-mean(deliverytime$deltime))/\n  sd(deliverytime$deltime)\nNCases <- (3-mean(deliverytime$ncases))/\n  sd(deliverytime$ncases)\nDistances <- ((sdeliverytime$deltime-NDelTime)^2 +\n  (sdeliverytime$ncases-NCases)^2)^0.5\nwhich.max(Distances)\nwhich.min(Distances)\n\n# stacked column chart\n# combination chart\n\n# reshaping and melting\n# melt - transforming multiple measures/columns into a single \n#        column/variable\n# cast - summarization of a molten dataset into aggregated data\nlibrary(reshape2)\nheisenberg <- read.csv(\"simple.csv\")\nheisenberg.m <- melt(heisenberg, id = c('trial'),\n                     measure = c('mass', 'velocity'))\nheisenberg.m\nheisenberg.c <- dcast(heisenberg.m, trial ~ variable, mean)\nheisenberg.c\n\n##### Visualization\n\n# to be taken up in the future\n\n##### Data Preprocessing\n\n# why? data in the real world is dirty\n# dirty: incomplete, noisy, inconsistent\n# Sir Rex: 70% to 80% of time spent on preprocessing data\n# garbage in, garbage out\n\n# major tasks in data preprocessing:\n# - data integration\n# - data transformation\n# - data cleaning\n# - data reduction\n# - data discretization\n\n# merging\n# first, create new trialcost dataframe to merge with heisenberg\ntrial <- c(\"A\", \"C\", \"D\")\ncost <- c(11.4, 3.3, 1.1)\ntrialcost <- data.frame(trial, cost)\ntrialcost\n# do the actual merge (inner, outer, left, and right joins)\ninnerjoin <- merge(x = heisenberg, y = trialcost, \n                   by = c(\"trial\"))\nouterjoin <- merge(x = heisenberg, y = trialcost, \n                   by = c(\"trial\"), all = TRUE)\nleftjoin <- merge(x = heisenberg,  y = trialcost,  \n                  by = c(\"trial\"),  all.x = TRUE)\nrightjoin <- merge(x = heisenberg,  y = trialcost,  \n                   by = c(\"trial\"),  all.y = TRUE)\n\n# data transformations\n# data discretization and data encoding\n\n# min-max normalization\n\n# (z-score) standardization -> standard normal dist\n\n# binning\n# equal-width (distance) partitioning - equal width bins,\n#     best for normally or evenly distributed data\n# equal-depth (frequency) partitioning - equal cardinality bins\n\n# data encoding\n# binary or class based",
    "created" : 1486181520775.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2151102881",
    "id" : "7BB4C4DD",
    "lastKnownWriteTime" : 1486186514,
    "last_content_update" : 1486186514040,
    "path" : "~/UP Files/IE 198/IE 198 Work/IE 198 Lecture 2.R",
    "project_path" : "IE 198 Lecture 2.R",
    "properties" : {
        "docOutlineVisible" : "0"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}