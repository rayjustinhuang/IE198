install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
ggplot(data=mpg)+
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data=mpg,mapping(aes(x=displ,y=hwy,color=class)))
ggplot(data = mpg, geom_point(mapping = aes(x = displ, y = hwy, color = class)))
ggplot(data = mpg, geom_point(mapping = aes(x=displ, y=hwy, color=class())))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = manufacturer, shape = model))
geom_point(mapping = aes(x = displ, y = hwy, color = year))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = year))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = year, color = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = year, alpha = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class, alpha = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = displ < 5))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = manufacturer))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = cyl))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) + geom_point() + geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot(mapping = aes(x = displ, y = hwy)) +
geom_point(data = mpg) +
geom_smooth(data = mpg)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, color = count))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, color = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut))
?geom_bar
q()
library(dplyr)
library(dplyr)
install.packages(dplyr)
library(dplyr)
install.packages("dplyr")
library(dplyr)
library(nycflights13)
?nycflights13
flights
library(nycflights13)
nycflights13_sqlite()
library(nycflights)
install.packages("nycflights13")
flights
library(nycflights13)
flights
View(flights)
filter(flights, month == 1, day == 1)
jan1 <- filter(flights, month == 1, day == 1)
jan 1
jan1
(dec25 <- filter(flights, month == 12, day == 25))
filter(flights, month == 11 | month == 12)
filter(flights, month == 11 | 12)
arrange(flights, year, month, day)
arrange(flights, desc(arr_delay))
transmute(flights,
dep_time,
hour = dep_time %/% 100,
minute = dep_time %% 100
)
?na.rm
??na.rm
?rm
requiredPackages <- c("ggplot2", "dplyr", "gapminder")
neededPackages <- requiredPackages[!(requiredPackages %in% installed.packages()[,"Package"])]
if(length(neededPackages)>0) install.packages(neededPackages)
rm(list = c("requiredPackages", "neededPackages"))
library(gapminder)
library(dplyr)
library(ggplot2)
gapminder2007 <- filter(gapminder, year == 2007)
ggplot(data = gapminder2007, mapping = aes(x = gdpPercap, y = lifeExp)) +
geom_point(mapping = aes(color = continent, size = pop)) +
geom_smooth(se = FALSE) +
labs(size = "Population", color = "Continent") +
xlab("GDP per Capita (USD)") +
ylab("Life Expectancy") +
theme(legend.position = "bottom") +
ggtitle("World Life Expectancy vs. GDP per Capita in 2007")
SEA <- droplevels(gapminder[gapminder$country %in% c("Philippines", "Singapore", "Indonesia", "Malaysia", "Thailand", "Vietnam"), ])
ggplot(data = SEA, mapping = aes(x = year, y = gdpPercap, color = country)) +
geom_point(mapping = aes(size = pop)) +
geom_smooth(mapping = aes(color = country)) +
labs(size = "Population", color = "Country", x = "Year", y = "GDP per Capita (USD)", title = "GDP per Capita vs. Year for SEA") +
theme(legend.position = "bottom")
ggplot(data = SEA, mapping = aes(group = year, x = year)) +
geom_boxplot(mapping = aes(y = lifeExp)) +
labs(x = "Year", y = "Life Expectancy (Years)", title = "Boxplots of Yearly Life Expectancy in SEA")
ggplot(data = SEA, mapping = aes(x = year, y = pop)) +
geom_bar(position = "dodge", stat = "identity", mapping = aes(fill = country)) +
facet_grid(. ~ country) +
labs(y = "Population", title = "SEA Population Growth per Country", fill = "Country") +
theme(legend.position = "bottom")
SEAwithPopDelta <- SEA %>% select(country, year, pop) %>%
mutate(pop_change = pop - lag(pop)) %>%
filter(year != 1952)
ggplot(data = SEAwithPopDelta, mapping = aes(x = year, y = pop_change, color = country)) +
geom_point(mapping = aes(size = pop)) +
geom_line() +
labs(color = "Country", size = "Population", x = "Year", y = "Change in Population (per 5 years)", title = "SEA Population Change over Time") +
theme(legend.position = "bottom")
Philippines <- droplevels(filter(gapminder, country == "Philippines"))
ggplot(data = Philippines, mapping = aes(x = pop, y = gdpPercap)) +
geom_point(mapping = aes(color = lifeExp)) +
geom_smooth() +
labs(color = "Life Expectancy", x = "Population", y = "GDP per Capita (USD)", title = "Philippine GDP per Capita vs. Population from 1952 to 2007") +
theme(legend.position = "bottom")
# Asia <- droplevels(filter(gapminder, continent == "Asia"))
# ggplot(data = Asia, mapping = aes(group = year, x = year)) +
#  geom_boxplot(mapping = aes(y = gdpPercap))
install.packages("pastecs")
install.packages("reshape2")
install.packages("rJava")
install.packages("RWeka")
install.packages("ROCR")
install.packages("partykit")
install.packages("e1071")
install.packages("car")
install.packages("glmnet")
install.packages("arules")
install.packages("arulesViz")
install.packages("arulesSequences")
install.packages("wordcloud")
install.packages("tm")
install.packages("twitteR")
install.packages("plyr")
install.packages ("stringr")
install.packages ("shiny")
install.packages("xlsx")
install.packages("data.table")
install.packages("MASS")
install.packages("ggplot2")
install.packages("RODBC")
install.packages("treemap")
install.packages("dplyr")
install.packages("installr")
install.packages("sqldf”)
install.packages("XLConnect”)
install.packages("sqldf”)
dfdasfa
gadsfadfa
q()
e()
install.packages("XLConnect”)
install.packages("XLConnect”)
install.packages("XLConnect”)
install.packages("ggplot2”)
install.packages("XLConnect”)
install.packages("dplyr")
install.packages("XLConnect")
install.packages("sqldf")
setwd("~/UP Files/IE 198/IE 198 Work")
help(solve)
?solve
# this comment is not a hashtag
# expression
2 + 3
# assignment
x <- 2 + 3
# print assignment
x
# this is a group of commands
{
y <- 2 + 3
z <- 2 + 4
}
# this is an incomplete command
x <- 1 +
2
# dataframes
x <- c(10.4, 5.6, 3.1, 6.4, 21.7)
y <- c(11.4, 6.6, 4.1, 7.4, 22.7)
z <- data.frame(x,y)
z
?read.csv
# read a CSV file
deliverytime <- read.csv(file="deliverytime.csv", header = TRUE, sep = ",")
deliverytime
library(pastecs)
options(scipen = 100, digits = 2)
stat.desc(deliverytime)
summary(deliverytime)
hist(deliverytime$deltime, ylab = "Minutes", col = 'green')
hist(deliverytime$ncases, ylab = "Cases", col = 'green')
hist(deliverytime$distance, main = "Histogram for Distance",
ylab = "Feet", col = 'green')
hist(deliverytime$deltime, ylab = "Minutes", col = 'green')
hist(deliverytime$ncases, ylab = "Cases", col = 'green')
hist(deliverytime$distance, main = "Histogram for Distance",
ylab = "Feet", col = 'green')
?hist
# create boxplots
boxplot(deliverytime$deltime, ylab = "Minutes", col = 'green')
boxplot(deliverytime$ncases, ylab = "Cases", col = 'green')
boxplot(deliverytime$distance, main = "Boxplot for Distance",
ylab = "Feet", col = 'green')
pairs(deliverytime)
sdeliverytime <- deliverytime
sdeliverytime$deltime <- (deliverytime$deltime-
mean(deliverytime$deltime))/sd(deliverytime$deltime)
sdeliverytime$ncases <- (deliverytime$ncases-mean(deliverytime$ncases))/sd(deliverytime$ncases)
sdeliverytime$distance <- (deliverytime$distance-mean(deliverytime$distance))/sd(deliverytime$distance)
correl <- sum(sdeliverytime$deltime*sdeliverytime$ncases)/(nrow(sdeliverytime)-1)
correl
cor(deliverytime$ncases, deliverytime$deltime)
NDelTime <- (20-mean(deliverytime$deltime))/
sd(deliverytime$deltime)
NCases <- (3-means(deliverytime$ncases))/
sd(deliverytime$ncases)
Distances <- ((sdeliverytime$deltime-NDelTime)^2 +
(sdeliverytime$ncases-NCases)^2)^0.5
which.max(Distances)
which.min(Distances)
NDelTime <- (20-mean(deliverytime$deltime))/sd(deliverytime$deltime)
NCases <- (3-means(deliverytime$ncases))/sd(deliverytime$ncases)
Distances <- ((sdeliverytime$deltime-NDelTime)^2 +(sdeliverytime$ncases-NCases)^2)^0.5
which.max(Distances)
which.min(Distances)
NDelTime <- (20-mean(deliverytime$deltime))/sd(deliverytime$deltime)
NCases <- (3-means(deliverytime$ncases))/sd(deliverytime$ncases)
NDelTime <- (20-mean(deliverytime$deltime))/sd(deliverytime$deltime)
NCases <- (3-mean(deliverytime$ncases))/sd(deliverytime$ncases)
Distances <- ((sdeliverytime$deltime-NDelTime)^2 +(sdeliverytime$ncases-NCases)^2)^0.5
which.max(Distances)
which.min(Distances)
NDelTime <- (20-mean(deliverytime$deltime))/
sd(deliverytime$deltime)
NCases <- (3-mean(deliverytime$ncases))/
sd(deliverytime$ncases)
Distances <- ((sdeliverytime$deltime-NDelTime)^2 +
(sdeliverytime$ncases-NCases)^2)^0.5
which.max(Distances)
which.min(Distances)
sdeliverytime <- deliverytime
sdeliverytime$deltime <-
(deliverytime$deltime-mean(deliverytime$deltime))/
sd(deliverytime$deltime)
sdeliverytime$ncases <-
(deliverytime$ncases-mean(deliverytime$ncases))/
sd(deliverytime$ncases)
sdeliverytime$distance <-
(deliverytime$distance-mean(deliverytime$distance))/
sd(deliverytime$distance)
correl <-
sum(sdeliverytime$deltime*sdeliverytime$ncases)/
(nrow(sdeliverytime)-1)
correl
NDelTime <- (20-mean(deliverytime$deltime))/
sd(deliverytime$deltime)
NCases <- (3-mean(deliverytime$ncases))/
sd(deliverytime$ncases)
Distances <- ((sdeliverytime$deltime-NDelTime)^2 +
(sdeliverytime$ncases-NCases)^2)^0.5
which.max(Distances)
which.min(Distances)
library(reshape2)
heisenberg <- read.csv("simple.csv")
heisenberg.m <- melt(heisenberg, id = c('trial'),
measure = c('mass', 'velocity'))
heisenberg.m
heisenberg.c <- dcast(heisenberg.m, trial ~ variable, mean)
heisenberg.c
View(heisenberg)
trial <- c("A", "C", "D")
cost <- c(11.4, 3.3, 1.1)
trialcost <- data.frame(trial, cost)
trialcost
innerjoin <- merge(x=heisenberg,y=trialcost,by=c("trial"))
innerjoin <- merge(x=heisenberg,y=trialcost,by=c("trial"))
outerjoin <- merge(x=heisenberg,y=trialcost, by = c("trial"),
all=TRUE)
leftjoin <- merge(x=heisenberg,y=trialcost,by=c("trial"),
all.x = TRUE)
rightjoin <- merge(x=heisenberg,y=trialcost,by=c("trial"),
all.y = TRUE)
View(innerjoin, outerjoin)
view(innerjoin)
View(innerjoin)
View(outerjoin)
View(leftjoin)
View(rightjoin)
